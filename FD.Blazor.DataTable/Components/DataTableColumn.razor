@using System.Linq.Expressions;

@typeparam TModel

@code {
    [CascadingParameter] private DataTable<TModel>? DataTable { get; set; }
    [Parameter] public bool IsSortable { get; set; } = false;
    [Parameter] public string? CustomTitle { get; set; }
    [Parameter] public bool IsDefaultSortColumn { get; set; } = false;
    [Parameter] public Expression<Func<TModel, object>>? Property { get; set; }
    [Parameter] public SortDirection DefaultSortDirection { get; set; } = SortDirection.Ascending;

    [Parameter] public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Template with the param being the name of the column
    /// </summary>
    [Parameter] public RenderFragment<string>? HeaderTemplate { get; set; }

    [Parameter] public RenderFragment<TModel>? RowTemplate { get; set; }

    [Parameter] public TextAlignment TextAlignment { get; set; } = TextAlignment.Left;

    /// <summary>
    /// The min width of the header (Default unit is vw)
    /// </summary>
    [Parameter] public int MinWidthHeader { get; set; } = 10;

    /// <summary>
    /// Css unit of MinWidthHeader property (default vw)
    /// </summary>
    [Parameter] public string MinWidthHeaderUnit { get; set; } = "vw";

    [Parameter] public int MaxWidth { get; set; } = 210;

    /// <summary>
    /// Css unit of MaxWidth property (default px)
    /// </summary>
    [Parameter] public string MaxWidthUnit { get; set; } = "px";

    /// <summary>
    /// Indicates whether or not the column is visible
    /// </summary>
    [Parameter]
    public bool IsVisible
    {
        get => isVisible;
        set
        {
            if (isVisible != value)
            {
                isVisible = value;
                RaiseStateChanged();
            }
        }
    }
    private bool isVisible = true;

    public Guid Guid { get; set; }

    protected override Task OnInitializedAsync()
    {
        if (DataTable == null) throw new ArgumentNullException($"A 'DataTableColumn' must be a child of a 'DataTable' component");

        Guid = Guid.NewGuid();
        DataTable.AddColumn(this);

        return Task.CompletedTask;
    }

    public string GetColumnPropertyName()
    {
        if (Property != null) return Utils.GetPropertyName<TModel>(Property);
        return "";
    }

    public string GetColumnVisualPropertyName()
    {
        if (Property != null)
        {
            string fullColumnName = GetColumnPropertyName();
            string propertyName = Utils.GetPropertyName<TModel>(Property);

            var parts = propertyName.Split('.');
            if (parts.Length > 0) return parts.Last();
        }

        return "";
    }

    public string GetColumnRowDataStyle() => $"text-align: {TextAlignment}; max-width: {MaxWidth}{MaxWidthUnit};";

    public event EventHandler? StateChanged;
    private void RaiseStateChanged()
    {
        EventHandler? handler = StateChanged;
        handler?.Invoke(this, new EventArgs());
    }

}
