@page "/TableStyling"

@using FD.Blazor.Examples.Data
@using System.Text.RegularExpressions

@inject WeatherForecastService ForecastService

@{
    string pattern = @"([(])?([+])?(\d{1})(\d{3})(\d{3})(\d{4})([)])?";
    string repl = @"+$3 ($4) $5-$6";
}

<div style="margin: 6px;">
    <button class="btn btn-primary" @onclick="@(async () => await _table.ClearSelection())">Clear Selection</button>
</div>
<EditForm EditContext="@editContext">
    <DataTable TModel="WeatherForecast" Items="LoadForecasts" @ref="_table"
               ContainerCssClass="d-flex justify-center align-center"
               ContainerAttributes=@(new Dictionary<string, object>() { { "style", "width: 100%;" } })
               Styles=@(TableStyle.Striped | TableStyle.Hover)
               TableAttributes=@(new Dictionary<string, object>() { { "style", "width: 100%;" } })
               AllowRowSelection="true"
               HideVirtualizePlaceholder="false" VirtualizePlaceholder=@((e) => e.AddMarkupContent(1, "<p><em>Loading...</em></p>"))>

        <DataTableColumn TModel="WeatherForecast" CustomTitle="Selected" TextAlignment="TextAlignment.Center">
            <HeaderTemplate Context="title">
                <button class="btn btn-outline-dark btn-sm" data-toggle="tooltip" title="Toggle check for all the items">
                    Select
                </button>
            </HeaderTemplate>
            <RowTemplate Context="item">
                <InputCheckbox class="custom-control-lg" @bind-Value="@item.Selected"></InputCheckbox>
            </RowTemplate>
        </DataTableColumn>

        <DataTableColumn TModel="WeatherForecast" Property="(e) => e.Date.ToShortDateString()" />
        <DataTableColumn TModel="WeatherForecast" Property="(e) => e.TemperatureC" CustomTitle="Celsius" />
        <DataTableColumn TModel="WeatherForecast" Property="(e) => e.TemperatureF" CustomTitle="Fahrenheit" />
        <DataTableColumn TModel="WeatherForecast" Property="(e) => e.Summary" />
        <DataTableColumn TModel="WeatherForecast" Property=@((e) => TimeSpan.FromSeconds(e.DaylightTime).DurationToString()) CustomTitle="Daylight Time" />
        <DataTableColumn TModel="WeatherForecast" Property="(e) => Regex.Replace(e.Phone, pattern, repl)" CustomTitle="Forecasts phone" />
        <DataTableColumn TModel="WeatherForecast" Property="(e) => e.WhenUpdated.HasValue ? e.WhenUpdated.Value.ToShortDateString() : String.Empty" CustomTitle="Updated" 
                         ColumnStyle=ColumnStyle.Data Style="font-weight: 400;color: orangered;"/>

        <DataTableColumn TModel="WeatherForecast" CustomTitle="Subscribe" TextAlignment="TextAlignment.Center">
            <HeaderTemplate Context="title">
                @title
            </HeaderTemplate>
            <RowTemplate Context="item">
                <img class="bi-at" alt="Subscribe" title="Subscribe" @onclick=@((args) => { Console.WriteLine("Subscribed"); }) />                
            </RowTemplate>
        </DataTableColumn>
    </DataTable>
</EditForm>

@code {

    private EditContext editContext;
    private DataTable<WeatherForecast> _table;

    protected override void OnInitialized()
    {
        editContext = new EditContext(new WeatherForecast[0]);
    }

    /// <summary>
    /// ItemProvider for Virtualize component, this will retrieve the data from our service and manage records that will be shown.
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    protected async ValueTask<ItemsProviderResult<WeatherForecast>> LoadForecasts(ItemsProviderRequest request)
    {
        var fc = await ForecastService.GetForecastAsync(DateTime.Now);
        // simulates load time, this will allow us to verify virtualize placeholder is working
        await Task.Run(() => Task.Delay(1000));
        return new ItemsProviderResult<WeatherForecast>(fc.Skip(request.StartIndex).Take(request.Count), fc.Count());
    }
}
