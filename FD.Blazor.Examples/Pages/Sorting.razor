@page "/sorting"

@using System.Text.RegularExpressions

@inject IDataService DataService 

@{
    string pattern = @"([(])?([+])?(\d{1})(\d{3})(\d{3})(\d{4})([)])?";
    string repl = @"+$3 ($4) $5-$6";
}

<DataTable @ref="_table" TModel="WeatherForecast" Items="LoadForecasts" SortChanged="(c, d, e) => { this.SortColumn = c; this.SortDirection = d; this.SortColumnExpr = e; }">
    <DataTableColumn TModel="WeatherForecast" IsSortable="true" Property="(e) => e.Date.ToShortDateString()"
                     IsDefaultSortColumn="true" DefaultSortDirection="SortDirection.Descending" />
    <DataTableColumn TModel="WeatherForecast" IsSortable="true" Property="(e) => e.TemperatureC" CustomTitle="Celsius" />
    <DataTableColumn TModel="WeatherForecast" IsSortable="true" Property="(e) => e.TemperatureF" CustomTitle="Fahrenheit" />
    <DataTableColumn TModel="WeatherForecast" IsSortable="true" Property="(e) => e.Summary" />
    <DataTableColumn TModel="WeatherForecast" IsSortable="true" Property=@((e) => TimeSpan.FromSeconds(e.DaylightTime).DurationToString()) CustomTitle="Daylight Time" />
    <DataTableColumn TModel="WeatherForecast" IsSortable="true" Property="(e) => Regex.Replace(e.Phone, pattern, repl)" CustomTitle="Forecasts phone" />
    <DataTableColumn TModel="WeatherForecast" IsSortable="true" Property="(e) => e.WhenUpdated.HasValue ? e.WhenUpdated.Value.ToShortDateString() : String.Empty" CustomTitle="Updated" />
    <DataTableColumn TModel="WeatherForecast" IsSortable="true" Property="(e) => e.Location.City" CustomTitle="City" />

    @* TODO: this column is not sortable due lack of implementation of IComparable in the resulting expression *@
    <DataTableColumn TModel="WeatherForecast" CustomTitle="Frequency">
        <HeaderTemplate Context="title">
            @title
        </HeaderTemplate>
        <RowTemplate Context="item">
            @(string.Join(" | ", item.ReportTypes.Select(r => r.Name).ToArray()))
        </RowTemplate>
    </DataTableColumn>
</DataTable>


@code {

    private string SortColumn { get; set; }
    private SortDirection SortDirection { get; set; }
    private Expression<Func<WeatherForecast, object>>? SortColumnExpr { get; set; }

    private DataTable<WeatherForecast> _table;

    /// <summary>
    /// ItemProvider for Virtualize component, this will retrieve the data from our service and manage records that will be shown.
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    protected async ValueTask<ItemsProviderResult<WeatherForecast>> LoadForecasts(ItemsProviderRequest request)
    {
        var fc = await DataService.GetForecastAsync();
        try
        {
            if (SortColumnExpr != null)
                fc = (SortDirection == SortDirection.Ascending) ? fc.OrderBy(SortColumnExpr.Compile()).ToList() : fc.OrderByDescending(SortColumnExpr.Compile()).ToList();
            else if (SortColumn != null)
                fc = (SortDirection == SortDirection.Ascending) ? fc.OrderBy(SortColumn).ToList() : fc.OrderByDescending(SortColumn).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        return new ItemsProviderResult<WeatherForecast>(fc.Skip(request.StartIndex).Take(request.Count), fc.Count());
    }
}
